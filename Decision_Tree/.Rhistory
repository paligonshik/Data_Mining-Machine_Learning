knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggplot2)
library(DAAG)
library(rpart.plot)
library(rattle)
library(dplyr)
library(caret)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(DAAG)
library(rpart)
library(rpart.plot)
library(rattle)
library(dplyr)
library(caret)
data("spam7")
addmargins(table(spam7$yesno))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(DAAG)
library(rpart)
library(rpart.plot)
library(rattle)
library(dplyr)
library(caret)
library(ROCR)
a1 <- c("T","T","T","F","F","F","F","T","F")
is.character(a1)
a2 <- c("T","T","F","F","T","T","F","F","T")
is.character(a2)
a3 <- c(1,6,5,4,7,3,8,7,5)
targetclass <- c(1,1,0,1,0,0,0,1,0)
targetclass <- as.factor(targetclass)
df <- data.frame(a1, a2, targetclass)
df
str(df)
TT <- c(2, 0)
TF <- c(1, 1)
FT <- c(0, 3)
FF <- c(1, 1)
df1 <- data.frame(TT, TF, FT, FF)
df1
error_rate <-  2/9
error_rate
log(0)
class_err_a1<-1-max(1,2)
class_err_a1
class_err_a1<-1-max(7/9,2/9)
class_err_a1
class_err_a2<-1-max(5/9,4/9)
min(class_err_a1,class_err_a2)
names(class_err_a1,class_err_a2)
which(min(class_err_a1,class_err_a2))
which[min(class_err_a1,class_err_a2)]
min(class_err_a1,class_err_a2)
names(class_err_a1)<-"a1"
min(class_err_a1,class_err_a2)
class_err_a1
min(class_err_a1,class_err_a2)
class_err_a1<class_err_a2
a1<-1-((7/9)^2+(2/9)^2)
a1
a2<-1-((5/9)^2+(4/9)^2)
a2
a1<-a2
a1<-1-((7/9)^2+(2/9)^2)
a2<-1-((5/9)^2+(4/9)^2)
a1<a2
data("spam7")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(DAAG)
library(rpart)
library(rpart.plot)
library(rattle)
library(dplyr)
library(caret)
data("spam7")
colnames(spam7)
str(spam7)
full<-rpart(yesno~.,data = spam7)
prp(full)
prp(full,type = 2)
prp(full,type = 2,extra = 1)
train_index<-createDataPartition(spam7$yesno,p = 0.9,list = F)
train<-spam7[train_index,]
test<-spam7[-train_index,]
full<-rpart(yesno~.,data = train)
prp(full,type = 2,extra = 1)
set.seed(1)
train_index<-createDataPartition(spam7$yesno,p = 0.9,list = F)
train<-spam7[train_index,]
test<-spam7[-train_index,]
prp(full,type = 2,extra = 1)
prp(full,type = 2,extra = 1)
prp(full)
prp(full,type = 2,extra = 1)
prp(full)
colnames(train)
prp(full)
asRules(model)
asRules(full)
prp(full,extra = 1)
length(train)
dim(train)
dim(train)[1]
dim(train)[1]*.25
print(full)
printcp(full)
full<-rpart(yesno~.,data = train,rpart.control(cp = 0))
full<-rpart(yesno~.,data = train,control = rpart.control(cp = 0))
printcp(full)
prp(full)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(DAAG)
library(rpart)
library(rpart.plot)
library(rattle)
library(dplyr)
library(caret)
library(ROCR)
a1 <- c("T","T","T","F","F","F","F","T","F")
is.character(a1)
a2 <- c("T","T","F","F","T","T","F","F","T")
is.character(a2)
a3 <- c(1,6,5,4,7,3,8,7,5)
targetclass <- c(1,1,0,1,0,0,0,1,0)
targetclass <- as.factor(targetclass)
df <- data.frame(a1, a2, targetclass)
df
str(df)
TT <- c(2, 0)
TF <- c(1, 1)
FT <- c(0, 3)
FF <- c(1, 1)
df1 <- data.frame(TT, TF, FT, FF)
df1
error_rate <-  2/9
error_rate
Split1_Gini <- 5/9*(1-(4/5*4/5)-(1/5*1/5))+4/9*(1-(3/4*3/4)-(1/4*1/4))
round(Split1_Gini,2)
Split2_Gini <- 5/9*(1-(3/5*3/5)-(2/5*2/5))+4/9*(1-(2/4*2/4)-(2/4*2/4))
round(Split2_Gini, 2)
data("spam7")
str(spam7)
levels(spam7$yesno) <- c("No", "Yes")
set.seed(1)
trainindex<- createDataPartition(spam7$yesno, p = .9, list = FALSE)
train <- spam7[trainindex,]
test <- spam7[-trainindex,]
model <- rpart(yesno~., data= train)
prp(model, type = 2, extra = 1, main = "Number of observations that fall in the node per class")
prp(full,type = 2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(DAAG)
library(rpart)
library(rpart.plot)
library(rattle)
library(dplyr)
library(caret)
class_err_a1<-1-max(7/9,2/9)
class_err_a2<-1-max(5/9,4/9)
class_err_a1<class_err_a2
a1<-1-((7/9)^2+(2/9)^2)
a2<-1-((5/9)^2+(4/9)^2)
a1<a2
data("spam7")
colnames(train)
train<-spam7[train_index,]
full<-rpart(yesno~.,data = train,control = rpart.control(cp = 0))
train<-spam7[train_index,]
test<-spam7[-train_index,]
train_index<-createDataPartition(spam7$yesno,p = 0.9,list = F)
train<-spam7[train_index,]
test<-spam7[-train_index,]
full<-rpart(yesno~.,data = train,control = rpart.control(cp = 0))
prp(full,type = 2)
asRules(full)
asRules(full)[:2]
asRules(full)[2]
asRules(full)
asRules(full)
prp(full,type = 2)
prp(full,type = 2)
fancyRpartPlot(full)
asRules(full)
full<-rpart(yesno~.,data = train)#,control = rpart.control(cp = 0))
fancyRpartPlot(full)
prp(full)
prp(full,extra = 2)
prp(full,extra = 1)
asRules(full)
full<-rpart(yesno~.,data = train,control = rpart.control(cp = 0))
prp(full,extra = 1)
asRules(full)
#asRules(full)
dim(train)[1]*.25
prp(full,extra = 1)
dim(train)[1]*.25
prp(model,extra = 1)
model<-rpart(yesno~.,data = train,control = rpart.control(cp = 0,minbucket = z))
z<-dim(train)[1]*.25
model<-rpart(yesno~.,data = train,control = rpart.control(cp = 0,minbucket = z))
prp(model,extra = 1)
z<-nrow(train)*.25
z
model<-rpart(yesno~.,data = train,control = rpart.control(cp = 0,minbucket = z))
prp(model,extra = 1)
model <- rpart(yesno~., data= train)
prp(model, type = 2, extra = 1, main = "Number of observations that fall in the node per class")
model_min <- rpart(yesno~., minsplit=nrow(spam7)*0.25, data= train)
prp(model_min, type = 2, extra = 1, main = "Number of observations that fall in the node per class with / min set-up")
model<-rpart(yesno~.,data = train,control = rpart.control(cp = 0,minbucket = z))
prp(model,extra = 1)
model<-rpart(yesno~.,data = train,minbucket=1000)#control = rpart.control(cp = 0,minbucket = z))
prp(model,extra = 1)
model<-rpart(yesno~.,data = train,minbucket=z)#control = rpart.control(cp = 0,minbucket = z))
prp(model,extra = 1)
full<-rpart(yesno~.,data = train)##in order to have full
prp(full,extra = 1)
full<-rpart(yesno~.,data = train)
printcp(full)
prp(full)
data("spam7")
set.seed(1)
colnames(train)
train_index<-createDataPartition(spam7$yesno,p = 0.9,list = F)
train<-spam7[train_index,]
test<-spam7[-train_index,]
full<-rpart(yesno~.,data = train)
printcp(full)
prp(full)
data("spam7")
set.seed(1)
colnames(train)
train_index<-createDataPartition(spam7$yesno,p = 0.9,list = F)
train<-spam7[train_index,]
test<-spam7[-train_index,]
full<-rpart(yesno~.,data = train)
prp(full)
data("spam7")
set.seed(1)
colnames(train)
train_index<-createDataPartition(spam7$yesno,p = 0.9,list = F)
train<-spam7[train_index,]
test<-spam7[-train_index,]
full<-rpart(yesno~.,data = train)
prp(full)
data("spam7")
set.seed(1)
colnames(train)
train_index<-createDataPartition(spam7$yesno,p = 0.9,list = F)
train<-spam7[train_index,]
test<-spam7[-train_index,]
full<-rpart(yesno~.,data = train)
prp(full)
data("spam7")
set.seed(1)
colnames(train)
train_index<-createDataPartition(spam7$yesno,p = 0.9,list = F)
train<-spam7[train_index,]
test<-spam7[-train_index,]
full<-rpart(yesno~.,data = train)
prp(full)
asRules(full)
prp(full,extra = 1)
dim(train)[1]*.25
nrow(train)
nrow(train)*0.25
model<-rpart(yesno~.,data = train,minbucket=nrow(train)*0.25)
prp(model)
model<-rpart(yesno~.,data = train,minbucket=nrow(train)*0.25)
prp(model)
predict(full,test)
predict(full,test,type = "class")
full_pred<-predict(full,test,type = "class")
model_pred<-predict(model,test,type = "class")
model_pred<-predict(model,test,type = "prob")
full_pred<-predict(full,test,type = "prob")
model_pred<-predict(model,test,type = "prob")
full_pred
train
full_pred<-predict(full,test,type = "prob")
model_pred<-predict(model,test,type = "prob")
pred_f<-ifelse(full_pred[2,]>0.5,"y","n")
pred_m<-ifelse(model_pred[2,]>0.5,"y","n")
pred_m
model_pred[2,]
full_pred<-predict(full,test,type = "prob")
pred_f<-ifelse(full_pred[,2]>0.5,"y","n")
pred_m<-ifelse(model_pred[,2]>0.5,"y","n")
pred_f
confusionMatrix(pred_f,test$yesno,positive = "y")
pred_f
full_pred<-predict(full,test,type = "prob")
model_pred<-predict(model,test,type = "prob")
pred_f<-factor(ifelse(full_pred[,2]>0.5,"y","n"))
pred_m<-factor(ifelse(model_pred[,2]>0.5,"y","n"))
confusionMatrix(pred_f,test$yesno,positive = "y")
confusionMatrix(pred_m,test$yesno,positive = "y")
confusionMatrix(pred_f,test$yesno,positive = "y")
confusionMatrix(pred_m,test$yesno,positive = "y")
confusionMatrix(pred_f,test$yesno,positive = "y")
confusionMatrix(pred_m,test$yesno,positive = "y")
confusionMatrix(pred_f,test$yesno,positive = "y")
confusionMatrix(pred_m,test$yesno,positive = "y")
confusionMatrix(pred_f,test$yesno,positive = "y")
confusionMatrix(pred_m,test$yesno,positive = "y")
library(pROC)
roc(test$yesno,full_pred[,2])
library(pROC)
rrr<-roc(test$yesno,full_pred[,2])
g1<-ggroc(rrr,alpha = 0.5, colour = "green", linetype = 1, size = 1)+ggtitle("ROC curve for Model")
g1
rrr1<-roc(test$yesno,model_pred[,2])
g2<-ggroc(rrr1,alpha = 0.5, colour = "green", linetype = 1, size = 1)+ggtitle("ROC curve for Model")
grid.arrange(g1, g2,nrow=1)
library(GGally)
grid.arrange(g1, g2,nrow=1)
library(gridExtra)
grid.arrange(g1, g2,nrow=1)
rrr<-roc(test$yesno,full_pred[,2])
g1<-ggroc(rrr,alpha = 0.5, colour = "green", linetype = 1, size = 1)+ggtitle("ROC curve for full")
grid.arrange(g1, g2,nrow=1)
auc(rrr)
auc(rrr1)
auc(rrr)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(DAAG)
library(rpart)
library(rpart.plot)
library(rattle)
library(dplyr)
library(caret)
library(GGally)
library(pROC)
library(gridExtra)
class_err_a1<-1-max(7/9,2/9)
class_err_a2<-1-max(5/9,4/9)
class_err_a1<class_err_a2
a1<-1-((7/9)^2+(2/9)^2)
a2<-1-((5/9)^2+(4/9)^2)
a1<a2
data("spam7")
set.seed(1)
colnames(train)
train_index<-createDataPartition(spam7$yesno,p = 0.9,list = F)
train<-spam7[train_index,]
test<-spam7[-train_index,]
full<-rpart(yesno~.,data = train)
prp(full)
asRules(full)
model<-rpart(yesno~.,data = train,minbucket=nrow(train)*0.25)
prp(model)
full_pred<-predict(full,test,type = "prob")
model_pred<-predict(model,test,type = "prob")
pred_f<-factor(ifelse(full_pred[,2]>0.5,"y","n"))
pred_m<-factor(ifelse(model_pred[,2]>0.5,"y","n"))
confusionMatrix(pred_f,test$yesno,positive = "y")
confusionMatrix(pred_m,test$yesno,positive = "y")
rrr<-roc(test$yesno,full_pred[,2])
g1<-ggroc(rrr,alpha = 0.5, colour = "green", linetype = 1, size = 1)+ggtitle("ROC curve for full")
rrr1<-roc(test$yesno,model_pred[,2])
g2<-ggroc(rrr1,alpha = 0.5, colour = "green", linetype = 1, size = 1)+ggtitle("ROC curve for Model")
auc(rrr)
auc(rrr1)
grid.arrange(g1, g2,nrow=1)
