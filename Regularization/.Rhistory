search
seq(0, 1, len = 11)^3
cva.glmnet(x, df$gross_adjusted, alpha = alphas,nfolds = 10)
install.packages("glmnetUtils")
library(glmnetUtils)
cva.glmnet(x, df$gross_adjusted, alpha = alphas,nfolds = 10)
cv_elas<-cva.glmnet(x, df$gross_adjusted, alpha = alphas,nfolds = 10)
cv_elas
names(cv_elas)
library(caret)
train()
mygrid<-expand.grid(alpha=alphas,lambda=lambdas)
elast = train(gross_adjusted ~.,
data = df,
method ="glmnet",
tuneGrid = mygrid)
mycontrol = trainControl(method = "cv",
number = 10,
verbose = T)
elast = train(gross_adjusted ~.,
data = df,
method ="glmnet",
tuneGrid = mygrid,
trControl=mycontrol)
alphas=seq(from=0,to=1,11)^3
alphas
alphas=seq(from=0,to=1,length.out = 11)^3
alphas
mycontrol = trainControl(method = "cv",
number = 10,
verbose = T)
elast = train(gross_adjusted ~.,
data = df,
method ="glmnet",
tuneGrid = mygrid,
trControl=mycontrol)
mygrid<-expand.grid(alpha=alphas,lambda=lambdas)
mycontrol = trainControl(method = "cv",
number = 10,
verbose = T)
elast = train(gross_adjusted ~.,
data = df,
method ="glmnet",
tuneGrid = mygrid,
trControl=mycontrol)
lambdas
lambdas<-seq(from=0,to = 10,by = 0.01)
lambdas
mygrid<-expand.grid(alpha=alphas,lambda=lambdas)
mycontrol = trainControl(method = "cv",
number = 10,
verbose = T)
elast = train(gross_adjusted ~.,
data = df,
method ="glmnet",
tuneGrid = mygrid,
trControl=mycontrol)
mycontrol = trainControl(method = "repeatedcv",
number = 10)
elast = train(gross_adjusted ~.,
data = df,
method ="glmnet",
tuneGrid = mygrid,
trControl=mycontrol)
mycontrol = trainControl(method = "cv",
number = 10)
elast = train(gross_adjusted ~.,
data = df,
method ="glmnet",
tuneGrid = mygrid,
trControl=mycontrol)
library(readxl)
library(dplyr)
library(plyr)
library(zoo)
library(Metrics)
data<-read_excel("movies_data.xls",na=c('#DIV/0',"#DIV/0!","#NAME?", 'NA',"N/A",""," "))
data$genre_first<-factor(data$genre_first)
data$Country<-factor(data$Country)
data$Rated<-factor(data$Rated)
data$Rated<-revalue(data$Rated, c("NOT RATED"="UNRATED"))
data$genre_first<-factor(data$genre_first)
data$Production<-factor(data$Production)
data$OscarWon<-factor(data$OscarWon)
data$Oscar_binary<-ifelse(data$OscarNom==0,0,1)
data<-data%>% mutate_if(is.numeric , na.aggregate)
data<-na.omit(data)
df<-data %>% dplyr::select(-c(Writer,Production,index,Country,OscarWon,Oscar_binary,OscarNom,Director,Plot,Language,Awards,gross,budget,Release,DVD,Release_Month,Release_Day,Release_year,Actors,Genre,title,OtherWin,OtherNom,imdbVotes,Metascore,duration,cast_facebook_likes,Rated))
colnames(df)
set.seed(42)
index<-sample(nrow(df),nrow(df)*.75,replace = F)
df[c("gross_adjusted","budget_adjusted")] <- lapply(df[c("gross_adjusted","budget_adjusted")], log)
train<-df[index,]
test<-df[-index,]
options(scipen=999)
model<-lm(gross_adjusted~genre_first+imdbRating+year+budget_adjusted+reviews,data = train)
summary(model)
pred<-predict(model,test)
actual<-test$gross_adjusted
rmse(actual,pred)
actual<-df$gross_adjusted
library(readxl)
library(dplyr)
library(plyr)
library(zoo)
library(Metrics)
data<-read_excel("movies_data.xls",na=c('#DIV/0',"#DIV/0!","#NAME?", 'NA',"N/A",""," "))
data$genre_first<-factor(data$genre_first)
data$Country<-factor(data$Country)
data$Rated<-factor(data$Rated)
data$Rated<-revalue(data$Rated, c("NOT RATED"="UNRATED"))
data$genre_first<-factor(data$genre_first)
data$Production<-factor(data$Production)
data$OscarWon<-factor(data$OscarWon)
data$Oscar_binary<-ifelse(data$OscarNom==0,0,1)
data<-data%>% mutate_if(is.numeric , na.aggregate)
data<-na.omit(data)
df<-data %>% dplyr::select(-c(Writer,Production,index,Country,OscarWon,Oscar_binary,OscarNom,Director,Plot,Language,Awards,gross,budget,Release,DVD,Release_Month,Release_Day,Release_year,Actors,Genre,title,OtherWin,OtherNom,imdbVotes,Metascore,duration,cast_facebook_likes,Rated))
colnames(df)
set.seed(42)
index<-sample(nrow(df),nrow(df)*.75,replace = F)
df[c("gross_adjusted","budget_adjusted")] <- lapply(df[c("gross_adjusted","budget_adjusted")], log)
train<-df[index,]
test<-df[-index,]
options(scipen=999)
model<-lm(gross_adjusted~genre_first+imdbRating+year+budget_adjusted+reviews,data = train)
summary(model)
pred<-exp(predict(model,test))
actual<-exp(test$gross_adjusted)
rmse(actual,pred)
library(glmnet)
set.seed(42)
y_train<-train$gross_adjusted
x_train<-model.matrix(~.,subset(train,select =-gross_adjusted))
y_test<-exp(test$gross_adjusted)
x_test<-model.matrix(~.,subset(test,select =-gross_adjusted))
lambdas<-seq(from=0,to = 10,by = 0.001)
x <- model.matrix( ~ .-gross_adjusted, df)
cros_ridge<-cv.glmnet(x =x,y=df$gross_adjusted,alpha=0,lambda = lambdas,nfolds = 10)
ridge<-glmnet(x = x_train,y=y_train,lambda=cros_ridge$lambda.min,alpha = 0)
pred_r<-exp(predict(ridge,newx = x_test ))
rmse(y_test,pred_r)
lambdas<-seq(from=0,to = 10,by = 0.001)
cros_lasso<-cv.glmnet(x =x,y=df$gross_adjusted,alpha=1,lambda = lambdas,nfolds = 10)
lasso<-glmnet(x = x_train,y=y_train,lambda=cros_lasso$lambda.min,alpha = 1)
pred_r<-exp(predict(lasso,newx = x_test ))
rmse(y_test,pred_r)
sum(lasso$beta!=0)
alphas=seq(from=0,to=1,length.out = 11)^3
library(glmnetUtils)
## Default S3 method:
elast<-cva.glmnet(x =x,y=df$gross_adjusted, alpha = alphas,nfolds = 10)
elast$alpha
alphas
elast$alpha
elast$alpha
elast$modlist
alphas=seq(from=0,to=1,length.out = 11)^3
output.of.cva.glmnet <- cva.glmnet(x =x,y=df$gross_adjusted,alpha = alphas)
library(glmnetUtils)
output.of.cva.glmnet <- cva.glmnet(x =x,y=df$gross_adjusted,alpha = alphas)
number.of.alphas.tested <- length(output.of.cva.glmnet$alpha)
number.of.alphas.tested
cv.glmnet.dt <- data.table()
library(data.table)
cv.glmnet.dt <- data.table()
for (i in 1:number.of.alphas.tested){
glmnet.model <- output.of.cva.glmnet$modlist[[i]]
min.mse <-  min(glmnet.model$cvm)
min.lambda <- glmnet.model$lambda.min
alpha.value <- output.of.cva.glmnet$alpha[i]
new.cv.glmnet.dt <- data.table(alpha=alpha.value,min_mse=min.mse,min_lambda=min.lambda)
cv.glmnet.dt <- rbind(cv.glmnet.dt,new.cv.glmnet.dt)
}
best.params <- cv.glmnet.dt[which.min(cv.glmnet.dt$min_mse)]
best.params
best.params <- cv.glmnet.dt[which.min(cv.glmnet.dt$min_mse)]
best.params <- cv.glmnet.dt[which.min(cv.glmnet.dt$min_mse)]
best.params
best.params$alpha
elast<-glmnet(x = x_train,y=y_train,lambda=best.params$min_lambda,alpha = best.params$alpha)
pred_r<-exp(predict(lasso,newx = x_test ))
pred_r<-exp(predict(elast,newx = x_test ))
rmse(y_test,pred_r)
library(dplyr)
library(plyr)
library(zoo)
library(Metrics)
rmse(y_test,pred_r)
library(dplyr)
pred<-exp(predict(model,test))
actual<-exp(test$gross_adjusted)
rmse(actual,pred)
library(readxl)
library(dplyr)
library(plyr)
library(zoo)
library(Metrics)
data<-read_excel("movies_data.xls",na=c('#DIV/0',"#DIV/0!","#NAME?", 'NA',"N/A",""," "))
data$genre_first<-factor(data$genre_first)
data$Country<-factor(data$Country)
data$Rated<-factor(data$Rated)
data$Rated<-revalue(data$Rated, c("NOT RATED"="UNRATED"))
data$genre_first<-factor(data$genre_first)
data$Production<-factor(data$Production)
data$OscarWon<-factor(data$OscarWon)
data$Oscar_binary<-ifelse(data$OscarNom==0,0,1)
data<-data%>% mutate_if(is.numeric , na.aggregate)
data<-na.omit(data)
df<-data %>% dplyr::select(-c(Writer,Production,index,Country,OscarWon,Oscar_binary,OscarNom,Director,Plot,Language,Awards,gross,budget,Release,DVD,Release_Month,Release_Day,Release_year,Actors,Genre,title,OtherWin,OtherNom,imdbVotes,Metascore,duration,cast_facebook_likes,Rated))
colnames(df)
set.seed(42)
index<-sample(nrow(df),nrow(df)*.75,replace = F)
df[c("gross_adjusted","budget_adjusted")] <- lapply(df[c("gross_adjusted","budget_adjusted")], log)
train<-df[index,]
test<-df[-index,]
options(scipen=999)
model<-lm(gross_adjusted~genre_first+imdbRating+year+budget_adjusted+reviews,data = train)
summary(model)
pred<-exp(predict(model,test))
actual<-exp(test$gross_adjusted)
rmse(actual,pred)
pred_r<-exp(predict(ridge,newx = x_test ))
rmse(actual,pred_r)
lambdas<-seq(from=0,to = 10,by = 0.001)
cros_lasso<-cv.glmnet(x =x,y=df$gross_adjusted,alpha=1,lambda = lambdas,nfolds = 10)
lasso<-glmnet(x = x_train,y=y_train,lambda=cros_lasso$lambda.min,alpha = 1)
pred_l<-exp(predict(lasso,newx = x_test ))
rmse(y_test,pred_l)
sum(lasso$beta!=0)
alphas=seq(from=0,to=1,length.out = 11)^3
library(glmnetUtils)
library(data.table)
# make some dummy data
data(iris)
output.of.cva.glmnet <- cva.glmnet(x =x,y=df$gross_adjusted,alpha = alphas)
number.of.alphas.tested <- length(output.of.cva.glmnet$alpha)
cv.glmnet.dt <- data.table()
for (i in 1:number.of.alphas.tested){
glmnet.model <- output.of.cva.glmnet$modlist[[i]]
min.mse <-  min(glmnet.model$cvm)
min.lambda <- glmnet.model$lambda.min
alpha.value <- output.of.cva.glmnet$alpha[i]
new.cv.glmnet.dt <- data.table(alpha=alpha.value,min_mse=min.mse,min_lambda=min.lambda)
cv.glmnet.dt <- rbind(cv.glmnet.dt,new.cv.glmnet.dt)
}
best.params <- cv.glmnet.dt[which.min(cv.glmnet.dt$min_mse)]
elast<-glmnet(x = x_train,y=y_train,lambda=best.params$min_lambda,alpha = best.params$alpha)
pred_e<-exp(predict(elast,newx = x_test ))
rmse(y_test,pred_e)
alphas=seq(from=0,to=1,length.out = 11)^3
library(glmnetUtils)
library(data.table)
# make some dummy data
data(iris)
output.of.cva.glmnet <- cva.glmnet(x =x,y=df$gross_adjusted,alpha = alphas)
number.of.alphas.tested <- length(output.of.cva.glmnet$alpha)
cv.glmnet.dt <- data.table()
for (i in 1:number.of.alphas.tested){
glmnet.model <- output.of.cva.glmnet$modlist[[i]]
min.mse <-  min(glmnet.model$cvm)
min.lambda <- glmnet.model$lambda.min
alpha.value <- output.of.cva.glmnet$alpha[i]
new.cv.glmnet.dt <- data.table(alpha=alpha.value,min_mse=min.mse,min_lambda=min.lambda)
cv.glmnet.dt <- rbind(cv.glmnet.dt,new.cv.glmnet.dt)
}
best.params <- cv.glmnet.dt[which.min(cv.glmnet.dt$min_mse)]
elast<-glmnet(x = x_train,y=y_train,lambda=best.params$min_lambda,alpha = best.params$alpha)
pred_l<-exp(predict(elast,newx = x_test ))
rmse(y_test,pred_l)
alphas=seq(from=0,to=1,length.out = 11)^3
library(glmnetUtils)
library(data.table)
# make some dummy data
output.of.cva.glmnet <- cva.glmnet(x =x,y=df$gross_adjusted,alpha = alphas)
number.of.alphas.tested <- length(output.of.cva.glmnet$alpha)
cv.glmnet.dt <- data.table()
for (i in 1:number.of.alphas.tested){
glmnet.model <- output.of.cva.glmnet$modlist[[i]]
min.mse <-  min(glmnet.model$cvm)
min.lambda <- glmnet.model$lambda.min
alpha.value <- output.of.cva.glmnet$alpha[i]
new.cv.glmnet.dt <- data.table(alpha=alpha.value,min_mse=min.mse,min_lambda=min.lambda)
cv.glmnet.dt <- rbind(cv.glmnet.dt,new.cv.glmnet.dt)
}
best.params <- cv.glmnet.dt[which.min(cv.glmnet.dt$min_mse)]
elast<-glmnet(x = x_train,y=y_train,lambda=best.params$min_lambda,alpha = best.params$alpha)
pred_l<-exp(predict(elast,newx = x_test ))
rmse(y_test,pred_l)
best.params
library(Metrics)
data<-read_excel("movies_data.xls",na=c('#DIV/0',"#DIV/0!","#NAME?", 'NA',"N/A",""," "))
data$genre_first<-factor(data$genre_first)
data$Country<-factor(data$Country)
data$Rated<-factor(data$Rated)
data$Rated<-revalue(data$Rated, c("NOT RATED"="UNRATED"))
data$genre_first<-factor(data$genre_first)
data$Production<-factor(data$Production)
data$OscarWon<-factor(data$OscarWon)
data$Oscar_binary<-ifelse(data$OscarNom==0,0,1)
data<-data%>% mutate_if(is.numeric , na.aggregate)
data<-na.omit(data)
df<-data %>% dplyr::select(-c(Writer,Production,index,Country,OscarWon,Oscar_binary,OscarNom,Director,Plot,Language,Awards,gross,budget,Release,DVD,Release_Month,Release_Day,Release_year,Actors,Genre,title,OtherWin,OtherNom,imdbVotes,Metascore,duration,cast_facebook_likes,Rated))
set.seed(42)
index<-sample(nrow(df),nrow(df)*.75,replace = F)
df[c("gross_adjusted","budget_adjusted")] <- lapply(df[c("gross_adjusted","budget_adjusted")], log)
df<-data %>% dplyr::select(-c(Writer,Production,index,Country,OscarWon,Oscar_binary,OscarNom,Director,Plot,Language,Awards,gross,budget,Release,DVD,Release_Month,Release_Day,Release_year,Actors,Genre,title,OtherWin,OtherNom,imdbVotes,Metascore,duration,cast_facebook_likes,Rated))
colnames(df)
train<-df[index,]
options(scipen=999)
model<-lm(gross_adjusted~genre_first+imdbRating+year+budget_adjusted+reviews,data = train)
library(readxl)
library(dplyr)
library(plyr)
library(zoo)
library(Metrics)
data<-read_excel("movies_data.xls",na=c('#DIV/0',"#DIV/0!","#NAME?", 'NA',"N/A",""," "))
data$genre_first<-factor(data$genre_first)
data$Country<-factor(data$Country)
data$Rated<-factor(data$Rated)
data$Rated<-revalue(data$Rated, c("NOT RATED"="UNRATED"))
data$genre_first<-factor(data$genre_first)
data$Production<-factor(data$Production)
data$OscarWon<-factor(data$OscarWon)
data$Oscar_binary<-ifelse(data$OscarNom==0,0,1)
data<-data%>% mutate_if(is.numeric , na.aggregate)
data<-na.omit(data)
df<-data %>% dplyr::select(-c(Writer,Production,index,Country,OscarWon,Oscar_binary,OscarNom,Director,Plot,Language,Awards,gross,budget,Release,DVD,Release_Month,Release_Day,Release_year,Actors,Genre,title,OtherWin,OtherNom,imdbVotes,Metascore,duration,cast_facebook_likes,Rated))
colnames(df)
set.seed(42)
index<-sample(nrow(df),nrow(df)*.75,replace = F)
train<-df[index,]
test<-df[-index,]
options(scipen=999)
model<-lm(gross_adjusted~genre_first+imdbRating+year+budget_adjusted+reviews,data = train)
summary(model)
pred<-predict(model,test)
actual<-test$gross_adjusted
rmse(actual,pred)
actual<-test$gross_adjusted
rmse(actual,pred)
rmse(actual,pred)
library(readxl)
library(dplyr)
library(plyr)
library(zoo)
library(Metrics)
data<-read_excel("movies_data.xls",na=c('#DIV/0',"#DIV/0!","#NAME?", 'NA',"N/A",""," "))
data$genre_first<-factor(data$genre_first)
data$Country<-factor(data$Country)
data$Rated<-factor(data$Rated)
data$Rated<-revalue(data$Rated, c("NOT RATED"="UNRATED"))
data$genre_first<-factor(data$genre_first)
data$Production<-factor(data$Production)
data$OscarWon<-factor(data$OscarWon)
data$Oscar_binary<-ifelse(data$OscarNom==0,0,1)
data<-data%>% mutate_if(is.numeric , na.aggregate)
data<-na.omit(data)
df<-data %>% dplyr::select(-c(Writer,Production,index,Country,OscarWon,Oscar_binary,OscarNom,Director,Plot,Language,Awards,gross,budget,Release,DVD,Release_Month,Release_Day,Release_year,Actors,Genre,title,OtherWin,OtherNom,imdbVotes,Metascore,duration,cast_facebook_likes,Rated))
colnames(df)
set.seed(42)
index<-sample(nrow(df),nrow(df)*.75,replace = F)
train<-df[index,]
test<-df[-index,]
options(scipen=999)
model<-lm(gross_adjusted~genre_first+imdbRating+year+budget_adjusted+reviews,data = train)
summary(model)
pred<-predict(model,test)
actual<-test$gross_adjusted
rmse(actual,pred)
library(glmnet)
set.seed(42)
y_train<-train$gross_adjusted
x_train<-model.matrix(~.,subset(train,select =-gross_adjusted))
y_test<-test$gross_adjusted
x_test<-model.matrix(~.,subset(test,select =-gross_adjusted))
lambdas<-seq(from=0,to = 10,by = 0.001)
x <- model.matrix( ~ .-gross_adjusted, df)
cros_ridge<-cv.glmnet(x =x,y=df$gross_adjusted,alpha=0,lambda = lambdas,nfolds = 10)
ridge<-glmnet(x = x_train,y=y_train,lambda=cros_ridge$lambda.min,alpha = 0)
pred_r<-predict(ridge,newx = x_test )
rmse(y_test,pred_r)
cros_ridge$lambda.min
ridge<-glmnet(x = x_train,y=y_train,lambda=cros_ridge$lambda.min,alpha = 0)
pred_r<-predict(ridge,newx = x_test )
rmse(y_test,pred_r)
lambdas<-seq(from=0,to = 10,by = 0.001)
cros_lasso<-cv.glmnet(x =x,y=df$gross_adjusted,alpha=1,lambda = lambdas,nfolds = 10)
lasso<-glmnet(x = x_train,y=y_train,lambda=cros_lasso$lambda.min,alpha = 1)
pred_l<-predict(lasso,newx = x_test )
rmse(y_test,pred_l)
sum(lasso$beta!=0)
lasso$beta
sum(lasso$beta!=0)
rmse(y_test,pred_l)
alphas=seq(from=0,to=1,length.out = 11)^3
library(glmnetUtils)
library(data.table)
# make some dummy data
output.of.cva.glmnet <- cva.glmnet(x =x,y=df$gross_adjusted,alpha = alphas)
number.of.alphas.tested <- length(output.of.cva.glmnet$alpha)
cv.glmnet.dt <- data.table()
for (i in 1:number.of.alphas.tested){
glmnet.model <- output.of.cva.glmnet$modlist[[i]]
min.mse <-  min(glmnet.model$cvm)
min.lambda <- glmnet.model$lambda.min
alpha.value <- output.of.cva.glmnet$alpha[i]
new.cv.glmnet.dt <- data.table(alpha=alpha.value,min_mse=min.mse,min_lambda=min.lambda)
cv.glmnet.dt <- rbind(cv.glmnet.dt,new.cv.glmnet.dt)
}
best.params <- cv.glmnet.dt[which.min(cv.glmnet.dt$min_mse)]
elast<-glmnet(x = x_train,y=y_train,lambda=best.params$min_lambda,alpha = best.params$alpha)
pred_l<-predict(elast,newx = x_test)
rmse(y_test,pred_l)
library(readxl)
library(dplyr)
library(plyr)
library(zoo)
library(Metrics)
data<-read_excel("movies_data.xls",na=c('#DIV/0',"#DIV/0!","#NAME?", 'NA',"N/A",""," "))
data$genre_first<-factor(data$genre_first)
data$Country<-factor(data$Country)
data$Rated<-factor(data$Rated)
data$Rated<-revalue(data$Rated, c("NOT RATED"="UNRATED"))
data$genre_first<-factor(data$genre_first)
data$Production<-factor(data$Production)
data$OscarWon<-factor(data$OscarWon)
data$Oscar_binary<-ifelse(data$OscarNom==0,0,1)
data<-data%>% mutate_if(is.numeric , na.aggregate)
data<-na.omit(data)
df<-data %>% dplyr::select(-c(Writer,Production,index,Country,OscarWon,Oscar_binary,OscarNom,Director,Plot,Language,Awards,gross,budget,Release,DVD,Release_Month,Release_Day,Release_year,Actors,Genre,title,OtherWin,OtherNom,imdbVotes,Metascore,duration,cast_facebook_likes,Rated))
set.seed(42)
index<-sample(nrow(df),nrow(df)*.75,replace = F)
train<-df[index,]
test<-df[-index,]
options(scipen=999)
model<-lm(gross_adjusted~genre_first+imdbRating+year+budget_adjusted+reviews,data = train)
summary(model)
pred<-predict(model,test)
actual<-test$gross_adjusted
rmse(actual,pred)
library(readxl)
library(dplyr)
library(plyr)
library(zoo)
library(Metrics)
data<-read_excel("movies_data.xls",na=c('#DIV/0',"#DIV/0!","#NAME?", 'NA',"N/A",""," "))
data$genre_first<-factor(data$genre_first)
data$Country<-factor(data$Country)
data$Rated<-factor(data$Rated)
data$Rated<-revalue(data$Rated, c("NOT RATED"="UNRATED"))
data$genre_first<-factor(data$genre_first)
data$Production<-factor(data$Production)
data$OscarWon<-factor(data$OscarWon)
data$Oscar_binary<-ifelse(data$OscarNom==0,0,1)
data<-data%>% mutate_if(is.numeric , na.aggregate)
data<-na.omit(data)
df<-data %>% dplyr::select(-c(Writer,Production,index,Country,OscarWon,Oscar_binary,OscarNom,Director,Plot,Language,Awards,gross,budget,Release,DVD,Release_Month,Release_Day,Release_year,Actors,Genre,title,OtherWin,OtherNom,imdbVotes,Metascore,duration,cast_facebook_likes,Rated))
library(DAAG)
library(ggplot2)
library(gridExtra)
library(ggcorrplot)
library(DAAG)
library(caret)
library(pROC)
library(class)
library(BBmisc)
data("spam7")
addmargins(table(spam7$yesno))
set.seed(1)
train_index<-createDataPartition(spam7$yesno,p = 0.7,list = F)
train<-spam7[train_index,]
test<-spam7[-train_index,]
##Logit
logit<-glm(yesno~.,data = train,family = 'binomial')
predicted<-predict(logit,test,type = "response")
predicted<-ifelse(predicted>0.5,"y","n")
confusionMatrix(factor(predicted),test$yesno,positive = "y")
R1<-ifelse(predicted=="y",1,0)
R2<-ifelse(test$yesno=="y",1,0)
rrr1<-roc(R2,R1)
g1<-ggroc(rrr1,alpha = 0.5, colour = "green", linetype = 1, size = 1)+ggtitle("ROC curve for Model Logistic")
caret::
P_test<-caret::prediction(predict,Test$yesno)
P_test<-class::prediction(predict,Test$yesno)
library(ROCR)
P_test<-ROCR::prediction(predict,Test$yesno)
?prediction
P_test<-ROCR::prediction(predict,Test$yesno)
predict
P_test<-ROCR::prediction(predicted,Test$yesno)
P_test<-prediction(predicted,Test$yesno)
data("spam7")
addmargins(table(spam7$yesno))
set.seed(1)
train_index<-createDataPartition(spam7$yesno,p = 0.7,list = F)
train<-spam7[train_index,]
test<-spam7[-train_index,]
##Logit
logit<-glm(yesno~.,data = train,family = 'binomial')
predicted<-predict(logit,test,type = "response")
predicted<-ifelse(predicted>0.5,"y","n")
confusionMatrix(factor(predicted),test$yesno,positive = "y")
R1<-ifelse(predicted=="y",1,0)
R2<-ifelse(test$yesno=="y",1,0)
rrr1<-roc(R2,R1)
g1<-ggroc(rrr1,alpha = 0.5, colour = "green", linetype = 1, size = 1)+ggtitle("ROC curve for Model Logistic")
P_test<-prediction(predicted,test$yesno)
predicted
predicted<-predict(logit,test,type = "response")
P_test<-prediction(predicted,test$yesno)
P_test<-ROCR::prediction(predicted,test$yesno)
